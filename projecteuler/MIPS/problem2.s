#------------------------------------------------------------------------------
# Project Euler Problem #2:
# Each new term in the Fibonacci sequence is generated by adding the 
# previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed 
# four million, find the sum of the even-valued terms.
# 
# Author: Chris Moulds
#------------------------------------------------------------------------------

.data
.text

main:
	li $a0 2				# running sum variable
	li $t0 1 				# used for calculating the current fib value	
	li $t1 2 				# used for calculating the current fib value
 	li $t2 0				# holding the current fib value

#------------------------------------------------------------------------------
# To avoid performing a costly division operation, we can xor with 1 and shift
# the result to the most significant spot. Odd values always have an enabled 
# least significant bit, so the xor combined with a shift will produce a value
# of zero in the register. This can then be checked. 
#------------------------------------------------------------------------------
loop:
	add $t2 $t0 $t1

	xori $t3 $t2 1				# check if the value is even
	sll $t3 $t3 31 				
	beq $t3 $0 inc_counter		# if it's odd, don't add it to the sum

	add $a0 $a0 $t2				# if it's even, add it to the sum
	
inc_counter:					# compute next fib variables and check for 
	add $t0 $0 $t1				# loop break
	add $t1 $0 $t2
	slt $t4 $t2 4000001
	bgtz $t4 loop
		
finish:						# print the final value
	li $v0 1
	syscall

	jr $ra					# return to calling program

	
